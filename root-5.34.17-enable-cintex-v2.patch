diff --git a/cint/cintex/src/CINTFunctional.cxx b/cint/cintex/src/CINTFunctional.cxx
index c38efa7..fe72792 100644
--- a/cint/cintex/src/CINTFunctional.cxx
+++ b/cint/cintex/src/CINTFunctional.cxx
@@ -15,6 +15,7 @@
 #include "Api.h"
 #include "CINTFunctional.h"
 #include "RConfig.h"
+#include <stddef.h>
 
 #ifndef CINTEX_USE_MMAP
 # if (defined(__linux) || defined(R__MACOSX)) && ! defined(DATA_EXECUTABLE)
@@ -520,6 +521,50 @@ namespace ROOT { namespace Cintex {
                           ".word   0xfafafafa\n\t"
                           ".word   0xdadadada");
     }
+#elif defined(__aarch64__)
+    __attribute__((used))
+    static void f0a() {
+    __asm__ __volatile__ ("stp      x29, x30, [sp,#-16]!\n\t"
+                          "mov      x29, sp\n\t"
+                          "ldr      x1, #20\n\t"
+                          "ldr      x0, #24\n\t"
+                          "blr      x1\n\t"
+                          "ldp      x29, x30, [sp],#16\n\t"
+                          "ret\n\t"
+                          ".dword   0xfafafafafafafafa\n\t"
+                          ".dword   0xdadadadadadadada\n\t");
+    }
+
+    __attribute__((used))
+    static void f1a() {
+    __asm__ __volatile__ ("stp      x29, x30, [sp,#-16]!\n\t"
+                          "mov      x29, sp\n\t"
+                          "ldr      x2, #24\n\t"
+                          "mov      x1, x0\n\t"
+                          "ldr      x0, #24\n\t"
+                          "blr      x2\n\t"
+                          "ldp      x29, x30, [sp],#16\n\t"
+                          "ret\n\t"
+                          ".dword   0xfafafafafafafafa\n\t"
+                          ".dword   0xdadadadadadadada\n\t");
+    }
+
+    __attribute__((used))
+    static void f4a() {
+    __asm__ __volatile__ ("stp      x29, x30, [sp,#-16]!\n\t"
+                          "mov      x29, sp\n\t"
+                          "ldr      x5, #36\n\t"
+                          "mov      x4, x3\n\t"
+                          "mov      x3, x2\n\t"
+                          "mov      x2, x1\n\t"
+                          "mov      x1, x0\n\t"
+                          "ldr      x0, #24\n\t"
+                          "blr      x5\n\t"
+                          "ldp      x29, x30, [sp],#16\n\t"
+                          "ret\n\t"
+                          ".dword   0xfafafafafafafafa\n\t"
+                          ".dword   0xdadadadadadadada\n\t");
+    }
 #else
    static void f0a() {
       typedef void (*f_t)(void*);
@@ -533,7 +578,7 @@ namespace ROOT { namespace Cintex {
       typedef void (*f_t)(void*,void*,void*,void*,void*);
       ((f_t)FUNCPATTERN)((void*)DATAPATTERN, a0, a1, a2, a3);
    }
-#endif /* defined(__arm__) */
+#endif
 
    struct FunctionCode_t {
       FunctionCode_t(int narg) : f_offset(0), fa_offset(0), fSize(0) {
@@ -542,8 +587,8 @@ namespace ROOT { namespace Cintex {
          else if (narg == 4) fCode = (char*)f4a;
          char* b = fCode;
          for ( size_t o = 0; o < 1000; o++, b++) {
-            if ( *(size_t*)b == DATAPATTERN ) fa_offset = o;
-            if ( *(size_t*)b == FUNCPATTERN ) f_offset = o;
+            if ( *(ptrdiff_t*)b == DATAPATTERN ) fa_offset = o;
+            if ( *(ptrdiff_t*)b == FUNCPATTERN ) f_offset = o;
             if ( f_offset && fa_offset ) {
                fSize = (o + 256) & ~0xF;
                break;
@@ -565,8 +610,8 @@ namespace ROOT { namespace Cintex {
       // Allocate a stub function.
       static FunctionCode_t s_func4arg(4);
       char* code = Allocate_code(s_func4arg.fCode, s_func4arg.fSize );
-      *(void**)&code[s_func4arg.fa_offset] = (void*)obj;
-      *(void**)&code[s_func4arg.f_offset] = (void*)fun;
+      *(ptrdiff_t **)&code[s_func4arg.fa_offset] = (ptrdiff_t *)obj;
+      *(ptrdiff_t **)&code[s_func4arg.f_offset] = (ptrdiff_t *)fun;
       obj->fMethodCode = (G__InterfaceMethod)code;
       return obj->fMethodCode;
    }
@@ -577,8 +622,8 @@ namespace ROOT { namespace Cintex {
       // Allocate a stub function.
       static FunctionCode_t s_func0arg(0);
       char* code = Allocate_code(s_func0arg.fCode, s_func0arg.fSize);
-      *(void**)&code[s_func0arg.fa_offset] = (void*)obj;
-      *(void**)&code[s_func0arg.f_offset] = (void*)fun;
+      *(ptrdiff_t **)&code[s_func0arg.fa_offset] = (ptrdiff_t *)obj;
+      *(ptrdiff_t **)&code[s_func0arg.f_offset] = (ptrdiff_t *)fun;
       return (FuncVoidPtr_t)code;
    }
 
@@ -587,8 +632,8 @@ namespace ROOT { namespace Cintex {
       // Allocate a stub function.
       static FunctionCode_t s_func1arg(1);
       char* code = Allocate_code(s_func1arg.fCode, s_func1arg.fSize);
-      *(void**)&code[s_func1arg.fa_offset] = (void*)obj;
-      *(void**)&code[s_func1arg.fa_offset] = (void*)fun;
+      *(ptrdiff_t **)&code[s_func1arg.fa_offset] = (ptrdiff_t *)obj;
+      *(ptrdiff_t **)&code[s_func1arg.fa_offset] = (ptrdiff_t *)fun;
       return (FuncArg1Ptr_t)code;
    }
 
diff --git a/configure b/configure
index 5afa51f..1dfe11b 100755
--- a/configure
+++ b/configure
@@ -6202,6 +6202,10 @@ if test ! "x$enable_cintex" = "xno"; then
                     enable_cintex="yes"
                     result "yes"
                     ;;
+                aarch64)
+                    enable_cintex="yes"
+                    result "yes"
+                    ;;
                 *)
                     logmsg " incompatible Cintex architecture $chip"
                     enable_cintex=""
