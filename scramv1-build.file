### FILE scramv1-build

# This is a generic template to build a scram-based project.  Set the
# following parameters and import this to the spec.
#
#  cvsrepo	main project repository
#  cvstag	tag to check out the main project (normally: %{n}_%{v})
#  cvsconfig	cvs module to check out as "config" (normally: config)
#  cvssrc	cvs module to check out as project sources (normally: %n)
#  srctree	name of the cvssrcin export tree (normally: src)
#
#  buildarch	optional command to override build architecture
#  buildtarget  scram build target to generate the full release (normally: release)
#
#  patchsrc	patch to apply to the sources (optional)
#
# FIXME: support building all platforms together like scram does?
# FIXME: produce requirements from "scram tool info"?
# FIXME: automatic sub-packages for "doc" etc?
# FIXME: post-install stuff for modules etc?
 
Requires: SCRAMV1
%define initenv		%initenv_direct
%define scram_xml   .xml
%if "%{?scramcmd:set}" != "set"
%define scramcmd $SCRAMV1_ROOT/bin/scram --arch %cmsplatf
%endif

# NR: allow to specify repository and tag 
# (default: cvsrepo and cvstag)
%if "%{?configtag:set}" != "set"
%define configtag	%cvstag
%endif
%if "%{?configrepo:set}" != "set"
%define configrepo	%cvsrepo
%endif

# NR: allow to change tarball names, otherwise old distributions
# are fetched from the apt SOURCE repository. 

%if "%{?configtar:set}" != "set"
%define configtar	config.tar.gz
%endif

# NR: Allow to define bootstrap and requirements file names
%if "%{?bootstrapfile:set}" != "set"
%define bootstrapfile config/bootsrc%scram_xml
%define reqfile config/requirements%scram_xml
%endif

%if "%{?isPatch}" == "yes"
%if "%{?patchbaserelease:set}" != "set"
%define patchbaserelease %(echo %v | sed -e "s|_patch.||" -e "s|_...patch.||")
%endif
%if "%{?parent_release_base:set}" != "set"
%define parent_release_base ../../cmssw/%{patchbaserelease}
%endif
%endif

Source0: %{configrepo}&tag=-r%{configtag}&module=%{cvsconfig}&export=config&output=/%configtar
%if  "%{cvsrepo}" != "cmstc"
%define source1 %{cvsrepo}&tag=-r%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%else
%define source1 %{cvsrepo}://?tag=%{cvstag}&module=%{cvssrc}&export=%{srctree}&output=/src.tar.gz
%endif
# patch-releases _have_ to use the TC:
%if "%{?isPatch}" == "yes"
%define source1 %{cvsrepo}://?tag=%{cvstag}&module=%{cvssrc}&export=%{srctree}&baserel=%{patchbaserelease}&output=/src.tar.gz
# make sure we have FWCore/Version in the sources to be built
%define basereldir %(echo `echo %i | sed -e's|-patch||' -e's|_patch.||' -e's|_...patch.||'`)
%define fwcverstag %(echo `grep FWCore/Version %{basereldir}/src/PackageList.cmssw | awk '{print $2}'`)
# echo "tag is "%{fwcverstag}" from "%{basereldir} 
%define additionalSrc0 %{cvsrep}&tag=-r%{fwcverstag}&module=FWCore/Version&export=FWCore
%endif

# Pick additional sources.  Since install.sh does a grep for "^Source",
# we need to arrange an expansion that always works, regardless of whether
# %additionalSrc* are defined.
%if "%{?additionalSrc0:set}" == "set"
%define source2 %{additionalSrc0}&output=/src1.tar.gz
%else
%define source2 none
%endif 

%if "%{?additionalSrc1:set}" == "set"
%define source3 %{additionalSrc1}&output=/src2.tar.gz
%else
%define source3 none
%endif

%if "%{?ucprojname:set}" != "set"
%define ucprojname  %(echo %n | sed -e "s|-debug||"| tr 'a-z' 'A-Z')
%endif
%define lcprojname  %(echo %ucprojname | tr 'A-Z' 'a-z')

%if "%{?buildsetfile:set}" == "set"
%define source6 %buildsetfile 
%define source7 partial.py
%else
%define source6 none
%define source7 none
%endif

Source1: %source1
Source2: %source2
Source3: %source3
Source4: %lcprojname-tool
Source5: findDependencies.pl
Source6: %source6
Source7: %source7


%prep
rm -rf config
rm -rf %{srctree}
# Create a SCRAM project area, but using the already extracted
# sources.  In other words, pick up the files from the project config
# area, but munge all instances of <base url="cvs:*"> into a local
# reference so SCRAM won't try to download stuff from the network.

%setup -T -b 0 -n config
%setup -D -T -b 1 -n %{srctree}

%if "%{?additionalSrc0:set}" == "set"
# make sure we don't overwrite FWCore/Version if it's already in from the queue
if [ ! -e %{srctree}/FWCore/Version ]; then
%setup -D -T -a 2 -n %{srctree}
fi
%endif

%if "%{?additionalSrc1:set}" == "set"
%setup -D -T -a 3 -n %{srctree}
%endif

cd %_builddir

%if "%{?isPatch}" == "yes"
echo "Building patch release using toolbox from "${%{ucprojname}_PATCH_TOOL_CONF_ROOT}
%_builddir/config/updateConfig.pl -p %{ucprojname} -v %v -s $SCRAMV1_VERSION -t ${%{ucprojname}_PATCH_TOOL_CONF_ROOT}
%else
echo "Building standard release using toolbox from "${%{ucprojname}_TOOL_CONF_ROOT}
%_builddir/config/updateConfig.pl -p %{ucprojname} -v %v -s $SCRAMV1_VERSION -t ${%{ucprojname}_TOOL_CONF_ROOT}
%endif

%{?patchsrc:%patchsrc}
%{?patchsrc2:%patchsrc2}
%{?patchsrc3:%patchsrc3}
%{?patchsrc4:%patchsrc4}
%{?patchsrc5:%patchsrc5}

echo $PERL5LIB
echo rm -rf %i
mkdir -p $(dirname %i)

%{?buildarch:%buildarch}
%scramcmd project -d $(dirname %i) -b %{bootstrapfile}

%build
pwd

# Remove cmt stuff that brings unwanted dependencies: 
rm -rf `find %{i}/src -type d -name cmt`
echo `%scramcmd arch`
cd %i
cd src

%{?buildarch:%buildarch}

export BUILD_LOG=yes
export SCRAM_NOPLUGINREFRESH=yes
# export SCRAM_NOSYMCHECK=true

if [ $(uname) = Darwin ]; then
  # %scramcmd doesn't know the rpath variable on darwin...
  %scramcmd b echo_null # ensure lib, bin exist
  eval `%scramcmd runtime -sh`
  export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
fi

%if "%{?nolibchecks:set}" == "set"
export SCRAM_NOLOADCHECK=true
export SCRAM_NOSYMCHECK=true
%endif

%if "%{?preBuildCommand:set}" == "set"
echo "executing %preBuildCommand"
%preBuildCommand
%endif

%if "%{?buildtarget:set}" != "set"
%define buildtarget %{nil} 
%endif

%scramcmd b -r echo_CXX </dev/null
%if "%{?prebuildtarget:set}" == "set"
%scramcmd b --verbose -f %{prebuildtarget} </dev/null
%endif

%scramcmd b --verbose -f %{compileOptions} %{makeprocesses}  %{buildtarget} </dev/null || { %scramcmd b outputlog && false; }

%if "%{?additionalBuildTarget0:set}" == "set"
%scramcmd b --verbose -f %{additionalBuildTarget0} < /dev/null
%endif

%if "%{?postbuildtarget:set}" == "set"
%scramcmd b --verbose -f %{postbuildtarget} </dev/null
%endif

# strip out dependencies first...
%if "%{?saveDeps:set}" == "set" 
mkdir -p %i/etc/dependencies
chmod +x %{_sourcedir}/findDependencies.pl
%{_sourcedir}/findDependencies.pl -rel %i
gzip %i/etc/dependencies/uses.out
gzip %i/etc/dependencies/pyuses.out
%if "%{?isPatch}" == "yes"
gunzip -c ../%{parent_release_base}/etc/dependencies/usedby.out.gz > usedbyAll.out
gunzip -c ../%{parent_release_base}/etc/dependencies/pyusedby.out.gz > pyusedbyAll.out
cat %i/etc/dependencies/usedby.out >>usedbyAll.out
cat %i/etc/dependencies/pyusedby.out >>pyusedbyAll.out
gzip usedbyAll.out
gzip pyusedbyAll.out
mv usedbyAll.out.gz %i/etc/dependencies/usedby.out.gz
mv pyusedbyAll.out.gz %i/etc/dependencies/pyusedby.out.gz
%else
gzip %i/etc/dependencies/usedby.out
gzip %i/etc/dependencies/pyusedby.out
%endif
%endif

(eval `%scramcmd run -sh` ; echo $PYTHONPATH | sed -e "s/:/','/g" | awk '{print "#!/usr/bin/env python \n\ncmsswPythonPaths=['"'"'"$1"'"'"']"}' > %i/python/cmsswPaths.py) || true

chmod -R 755 %i %i/.SCRAM
rm -fR %i/lib/%cmsplatf/.edmplugincache
(eval `%scramcmd run -sh` ; EdmPluginRefresh) || true

%install
cd %i
%{?buildarch:%buildarch}
perl -p -i -e "s|^#!.*perl(.*)|#!/usr/bin/env perl$1|" $(grep -r -l -e "^#!.*perl.*" . | grep -v  ^./external/)
# need writeable directory for profile stuff
mkdir -p etc/scram.d
sed 's|@PROJECT_NAME@|%ucprojname|g;s|@PROJECT_VERSION@|%v|g;s|@PROJECT_BUILD_PATH@|%_builddir|g;s|@PROJECT_ROOT@|%i|g' %_sourcedir/%lcprojname-tool > etc/scram.d/%lcprojname.xml
echo scramcmd: %scramcmd
%scramcmd install -f 
(SCRAM_TOOL_HOME=$SCRAMV1_ROOT/src; export SCRAM_TOOL_HOME; rm -rf external/%cmsplatf; ./config/SCRAM/linkexternal.pl --arch %cmsplatf --nolink INCLUDE) || true
echo "#-ap checking links in lib:"
pwd
ls -al external/%cmsplatf/lib/
%if "%{?buildsetfile:set}" == "set"
echo "Preparing PackageList.cmssw for the partial build, using base release version info"
chmod +x %{_sourcedir}/partial.py
%{_sourcedir}/partial.py %{_sourcedir}/%buildsetfile %{_builddir}/src/PackageList.cmssw src/PackageList.cmssw
%endif

%if "%{?isPatch}" == "yes"
cd src/
## echo "preparing PackageList.cmssw from "%{parent_release_base}
## cp %{parent_release_base}/src/PackageList.cmssw PackageList-base.cmssw
## cp PackageList.cmssw PackageList-patch.cmssw
## cp PackageList-base.cmssw pkgList.all
## cat PackageList.cmssw >>pkgList.all
## mv pkgList.all PackageList.cmssw

echo "Setting up symlinks to parent src/ in patch release"
for SUBSYS in `ls -d ../%{parent_release_base}/src/*`; do
  if [ -d $SUBSYS ] ; then
    S=`basename $SUBSYS`
    # echo "checking subsystem "$S
    if [ -d $S ] ; then
      for PKG in `ls -d ../%{parent_release_base}/src/$S/*`; do
        P=`basename $PKG`
        # echo "checking package "$P
        if [ -d $S/$P ] ; then # package is part of the patch-release, don't do anything
	   echo "in patch" $S/$P
        else
	   ln -s ../$PKG $S/.
        fi
      done
    else # subsys has no packages in patch-release, link it as a whole
       ln -s $SUBSYS .
    fi
  fi
done
cd ../python
# cd $RPM_INSTALL_PREFIX/cms/cmssw-patch/%v/python
echo "Setting up symlinks to parent python/ in patch release"
for SUBSYS in `ls -d ../%{parent_release_base}/python/*`; do
  if [ -d $SUBSYS ] ; then
    S=`basename $SUBSYS`
    # echo "checking subsystem "$S
    if [ -d $S ] ; then
      for PKG in `ls -d ../%{parent_release_base}/python/$S/[A-Za-z]*`; do
        P=`basename $PKG`
        # echo "checking package "$P
        if [ -d $S/$P ] ; then # package is part of the patch-release, don't do anything
	   echo "in patch" $S/$P
        else
	   ln -s ../$PKG $S/.
        fi
      done
    else # subsys has no packages in patch-release, link it as a whole
       ln -s $SUBSYS .
    fi
  fi
done
cd %i
%scramcmd b --verbose -f gindices
%endif

# Make tarball of src area in order to keep the number files tracked
# by rpm to a minimum and avoid seemingly related memory issues
tar czf src.tar.gz src
rm -fR src
rm -rf tmp

%post
export SCRAM_ARCH=%cmsplatf
cd $RPM_INSTALL_PREFIX/%pkgrel
if [ -e src.tar.gz ] ; then
  tar xzf src.tar.gz
  rm -fR src.tar.gz
fi
scramver=`cat config/scram_version`
. $RPM_INSTALL_PREFIX/%cmsplatf/lcg/SCRAMV1/$scramver/etc/profile.d/init.sh
%{relocateConfig}etc/scram.d/%lcprojname.xml
perl -p -i -e "s|%{instroot}|$RPM_INSTALL_PREFIX|g" $(find config -type f)
if [ -d python ]; then perl -p -i -e "s|%{instroot}|$RPM_INSTALL_PREFIX|g" $(find python -maxdepth 1 -type f); fi
(SCRAM_TOOL_HOME=$SCRAMV1_ROOT/src; export SCRAM_TOOL_HOME; ./config/SCRAM/projectAreaRename.pl %{instroot} $RPM_INSTALL_PREFIX  %cmsplatf )
%{?buildarch:%buildarch}
for L in `find external/%cmsplatf -maxdepth 2 -type l`; do
   mv $L $L-old; ln -s `readlink -n $L-old 2>&1 | sed -e "s|%{instroot}|$RPM_INSTALL_PREFIX|g" ` $L ; rm $L-old;
done
eval `%scramcmd run -sh`
for cmd in EdmPluginRefresh IgPluginRefresh ; do
  cmdpath=`which $cmd 2> /dev/null || echo ""`
  if [ "X$cmdpath" != X ] ; then
    $cmd || true
  fi
done
%scramcmd install -f

%postun
if [ -e $RPM_INSTALL_PREFIX/%pkgrel ] ; then
  cd $RPM_INSTALL_PREFIX/%pkgrel
  if [ -e src ] ; then
    rm -fR src
  fi
  if [ -e .SCRAM ] ; then
    rm -fR .SCRAM
  fi
fi
